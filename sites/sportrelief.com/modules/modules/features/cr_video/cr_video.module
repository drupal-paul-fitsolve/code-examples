<?php
/**
 * @file
 * Code for the cr_video feature.
 */

include_once 'cr_video.features.inc';

/**
 * Implements hook_init().
 * @ToDo use hook_update_N, hook_enabale and hook_form_alter
 */
function cr_video_init() {

  if(!module_exists('mediaelement')){
      drupal_set_message(t("Mediaelement module must be enabled for cr_video to work! Please check !link page",
        array("!link" => l("module", "admin/modules"))),
        'warning',
        FALSE
      );
      return;
  }else{
    // When the media player is set to be on all pages add it to the page.
    if (variable_get('mediaelement_sitewide', FALSE)) {
      drupal_set_message(t("Mediaelement.js set to override cr_video! Please uncheck site wide 'Mediaelement.js setting' !link",
        array("!link" => l("here", "admin/config/media/mediaelement"))),
        'warning',
        FALSE
      );
    }
  }
}

function cr_video_token_info() {

  $info = array();
  $info['types']['video'] = array(
    'name' => t('Video'),
    'description' => t('Tokens related to video formats.'),
    'needs-data' => 'node',
  );
  $info['tokens']['video']['id'] = array(
    'name' => t('Video ID'),
    'description' => t('Tokens related to Video id.'),
  );

  return $info;
}

/**
 * Implements hook_js_alter().
 */
function cr_video_js_alter(&$javascript) {
  // Swap out  node_embed.js for our modified version.
  if (isset($javascript[drupal_get_path('module', 'colorbox_node') . '/colorbox_node.js'])) {
    $javascript[drupal_get_path('module', 'colorbox_node') . '/colorbox_node.js']['data'] = drupal_get_path('module', 'cr_video') . '/js/colorbox_node.js';
  }
  if (isset($javascript[drupal_get_path('module', 'node_embed') . '/plugins/js/node_embed.js'])) {
    $javascript[drupal_get_path('module', 'node_embed') . '/plugins/js/node_embed.js']['data'] = drupal_get_path('module', 'cr_video') . '/js/node_embed.js';
  }
}


/**
 * Implements hook_theme_registry_alter().
 */
function cr_video_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'cr_video');
  $theme_registry['mediaelement_video']['theme path'] = $path;
  $theme_registry['mediaelement_video']['function'] = 'cr_video_mediaelement_video';


  if(module_exists("node_embed")) {
    //Add 'html--ckeditor-node-embed.tpl.php' template file
    $theme_registry['html__cr_ckeditor_node_embed'] = Array();
    $theme_registry['html__cr_ckeditor_node_embed']['template'] = 'html--ckeditor-node-embed';
    $theme_registry['html__cr_ckeditor_node_embed']['path'] = drupal_get_path('module', 'node_embed') . "/theme";
    $theme_registry['html__cr_ckeditor_node_embed']['render element'] = 'page';
    $theme_registry['html__cr_ckeditor_node_embed']['base hook'] = 'html';
    $theme_registry['html__cr_ckeditor_node_embed']['type'] = 'theme_engine';
    $theme_registry['html__cr_ckeditor_node_embed']['theme path'] = path_to_theme();
    $theme_registry['html__cr_ckeditor_node_embed']['preprocess functions'] = Array();
    $theme_registry['html__cr_ckeditor_node_embed']['process functions'] = Array();

    //Add 'page--ckeditor-node-embed.tpl.php' template file
    $theme_registry['page__cr_ckeditor_node_embed'] = Array();
    $theme_registry['page__cr_ckeditor_node_embed']['template'] = 'page--ckeditor-node-embed';
    $theme_registry['page__cr_ckeditor_node_embed']['path'] = drupal_get_path('module', 'node_embed') . "/theme";
    $theme_registry['page__cr_ckeditor_node_embed']['render element'] = 'page';
    $theme_registry['page__cr_ckeditor_node_embed']['base hook'] = 'page';
    $theme_registry['page__cr_ckeditor_node_embed']['type'] = 'theme_engine';
    $theme_registry['page__cr_ckeditor_node_embed']['theme path'] = path_to_theme();
    $theme_registry['page__cr_ckeditor_node_embed']['preprocess functions'] = Array();
    $theme_registry['page__cr_ckeditor_node_embed']['process functions'] = Array();
  }
}

/**
 * Implements hook_theme().
 */
function cr_video_theme() {
  return array(
    'posterfill_source' => array(
      'variables' => array(
        'src' => NULL,
        'media' => NULL,
      ),
    ),
    'cr_video_mediaelement_video' => array(
      'variables' => array(
        'video_attributes' => NULL,
        'video_posterfill' => NULL,
        'video_settings' => NULL,
      ),
      'template' => 'cr_video-mediaelement-video',
    ),
  );
}

/**
 * Implements hook_library().
 */
function cr_video_library() {
  $path = libraries_get_path('posterfill');
  $libraries = array();

  $libraries['posterfill'] = array(
    'title' => 'Posterfill',
    'website' => 'https://github.com/lewisnyman/posterfill',
    'version' => '0.1',
    'js' => array(
      $path . '/posterfill.js' => array('group' => JS_LIBRARY, 'preprocess' => TRUE),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_tokens().
 */
function cr_video_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  
  // Token to just display start frame images without markup or links
  if ($type == 'imageonly') {
    foreach ($tokens as $name => $original) {
      $video_token_parsed = explode(':',$name);
      $nid = $video_token_parsed[1];
      $vnode = node_load($nid);
      $image_url = $vnode->field_poster_file['und'][0]['uri'];
      $picture_group = $video_token_parsed[2];
      $breakpoints = _cr_video_get_breakpoint_sources($picture_group, $image_url);
      $url = drupal_get_path_alias('node/' . $nid);
      $markup = theme('picture', array(
          'uri' => $image_url,
          'breakpoints' => $breakpoints
          )
        );
      $replacements[$original] = $markup;
    }
  }
  // Token to display start frame which links to colorbox video
  // NEEDS WORK!!
  if ($type == 'startframe') {
    foreach ($tokens as $name => $original) {
      $video_token_parsed = explode(':',$name);
      $nid = $video_token_parsed[1];
      $vnode = node_load($nid);
      $image_url = $vnode->field_poster_file['und'][0]['uri'];
      $picture_group = $video_token_parsed[2];
      $breakpoints = _cr_video_get_breakpoint_sources($picture_group, $image_url);
      $url = drupal_get_path_alias('node/' . $nid);
      $markup = l(
        '<div class="cr-mediaelement-image"><div class="cr_video_layer mejs-overlay mejs-layer mejs-overlay-play">' .
        theme('picture', array(
          'uri' => $image_url,
          'breakpoints' => $breakpoints
          )
        ) . '<div class="mejs-overlay-button"></div></div></div>',
        $url, array(
          'query' =>
            array(
              'width' => 100,
              'height' => 100
            ),
          'attributes' => array(
            'class' => array(
              'colorbox-node'
            )
          ), 'html' => TRUE
        )
      );
      $markup = str_replace('http://styles//http/', 'http://', $markup);
      drupal_add_library('mediaelement', 'mediaelement');
      drupal_add_css(drupal_get_path('module', 'cr_video') . '/css/cr_video.css');
      $replacements[$original] = $markup;
    }
  }

  if ($type == 'video') {
    foreach ($tokens as $name => $original) {
      if(strpos($name,':')){
        // Manipulate implementation of video by intercepting video rendering array and modify based on
        // config passed by token. You can set grid and picture group via token which is usually
        // set by view mode display page 'manage display' field settings. In essence we override here.
        $video_token_parsed = explode(':',$name);
        $nid = $video_token_parsed[1];
        if(isset($video_token_parsed[2]) && !empty($video_token_parsed[2])) {
          $picture_group = $video_token_parsed[2];
        }
        else{
          $picture_group = 'video_poster';
          drupal_set_message(
            t("You havent provided picture group ( you entered '[video:@token]' ). Using default",
              array("@token" => $name))
          );
        }

        // Get field meta data to be used to attach to entities.
        $field_name = 'field_video_url';
        $field_info = field_info_field($field_name);
        $field_id = $field_info['id'];
        if(isset($nid)) { // if node specified
          $vnode = node_load($nid);

          if(isset($vnode)){ // if video node exists
            if($vfield = field_get_items('node', $vnode, $field_name)){
              // if video_url field exists
              $voutput = field_view_value('node', $vnode, $field_name, $vfield[0], 'default');
              // Check if start frame is provided
              if($vpfield = field_get_items('node', $vnode, 'field_poster_file')) {
                $file_uri = $vpfield[0]['uri'];
              }else{
                drupal_set_message(t("No start frame provided"));
              }
              // We only want a link to open a popup.
              if(isset($video_token_parsed[3]) && $video_token_parsed[3] == 'popup') {
                $url = drupal_get_path_alias('node/' . $nid);
                $breakpoints = _cr_video_get_breakpoint_sources($picture_group, $file_uri);
                $markup = l(
                  '<div class="cr-mediaelement-video"><div class="cr_video_layer mejs-overlay mejs-layer mejs-overlay-play">' .
                  theme('picture', array(
                    'uri' => $file_uri,
                    'breakpoints' => $breakpoints
                    )
                  ) . '<div class="mejs-overlay-button"></div></div></div>',
                  $url, array(
                    'query' =>
                      array(
                        'width' => 100,
                        'height' => 100
                      ),
                    'attributes' => array(
                      'class' => array(
                        'colorbox-node'
                      )
                    ), 'html' => TRUE
                  )
                );
                drupal_add_library('mediaelement', 'mediaelement');
                drupal_add_css(drupal_get_path('module', 'cr_video') . '/css/cr_video.css');
                $replacements[$original] = $markup;

              }
              else {
                $voutput['#settings']['breakpoint_mapping'] = _cr_video_get_breakpoint_sources($picture_group, $file_uri);
                $voutput['#settings']['poster_image_uri'] = $file_uri;
                // Get field formatted field
                $markup = drupal_render($voutput);
                $replacements[$original] = $markup;
              }
            }
          }else{
            drupal_set_message(
              t("This node does not exist, try another video node id. You should check by filtering 'video' !link",
                array("!link" => l("here","admin/content"))
              )
            );
          }
        }
      }
    }
  }
  // Return the replacements.
  return $replacements;
}

/**
 * Returns an array of breakpoint sources.
 *
 * @return type $sources
 *   An associative array containing:
 *   - media: The media query to use.
 *   - src: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *
 */
function _cr_video_get_breakpoint_sources($picture_group, $file_uri) {
  $sources =  NULL;
  $mappings = picture_mapping_load($picture_group);
  if ($mappings) {
    $breakpoint_styles = array();
    $fallback_image_style = '';
    if ($mappings) {
      foreach ($mappings->mapping as $breakpoint_name => $multipliers) {
        if (!empty($multipliers)) {
          foreach ($multipliers as $multiplier => $image_style) {
            if (!empty($image_style)) {
              if (empty($fallback_image_style)) {
                $fallback_image_style = $image_style;
              }
              if (!isset($breakpoint_styles[$breakpoint_name])) {
                $breakpoint_styles[$breakpoint_name] = array();
              }
              $breakpoint_styles[$breakpoint_name][$multiplier] = $image_style;
            }
          }
        }
      }
    }
  }else{
    drupal_set_message(
      t("Picture group '@picture_group' does not exist! Please apply existing picture group. A list can be found !link",
        array("@picture_group" => $picture_group, "!link" => l("here","admin/config/media/picture"))),
      'warning'
      );
  }
  return $breakpoint_styles;
}

/**
 * Implementation of hook_preprocess_field()
 *
 * This is where node display of video is being overriden
 *
 */

function cr_video_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_name'] == 'field_video_url') {
    if (!empty($variables['element']['#object']->field_poster_file[$variables['element']['#language']])) {
      $file_uri = $variables['element']['#object']->field_poster_file[$variables['element']['#language']][0]['uri'];
      $picture_group = $variables['items'][0]['#settings']['poster_picture_group'];
      if(!isset($picture_group)) { // If picture group specified
        $picture_group = 'video_poster';
        drupal_set_message(
          t("You havent provided picture group. Using default 'video_poster' Picture group",
            array("@token" => $name))
        );
      }
      $variables['items'][0]['#settings']['breakpoint_mapping'] = _cr_video_get_breakpoint_sources($picture_group, $file_uri);
      $variables['items'][0]['#settings']['poster_image_uri'] = $file_uri;
    }
  }
}


function cr_video_preprocess_mediaelement_video(&$variables) {
  $src = $variables['attributes']['src'];
  $type="";
  // youtu catches the short url youtu.be as well
  if(strpos($src, 'youtu') !== false) {
    $type = 'youtube';
  }
  else if(strpos($src, 'mp4') !== false) {
    $type = 'mp4';
  }
  else if(strpos($src, 'vimeo') !== false) {
    $type = 'vimeo';
  }
  $variables['attributes']['type'] = $type;

  // Stringify the posterfills
 $variables['breakpoints'] = $variables['settings']['breakpoint_mapping'];
 $variables['poster_image_uri'] = $variables['settings']['poster_image_uri'];
}

function cr_video_mediaelement_video($variables) {

  $picture_group = theme('picture',array(
      'breakpoints' => $variables['breakpoints'],
      'uri' => $variables['poster_image_uri'],
      'style_name' => 'grid-all-columns-fluid',
  ));

  $config = array(
    'video_attributes' => $variables['attributes'],
    'video_poster' => $picture_group,
    'video_settings' => $variables['settings'],
  );

  $output = theme('cr_video_mediaelement_video', $config);
  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function cr_video_field_formatter_info() {
  $formatters = array();

  $formatters['mediaelement_video_responsive'] = array(
    'label' => t('MediaElement Responsive Video'),
    'field types' => array('file', 'link_field'),
    'settings' => array(
      'controls' => variable_get('mediaelement_video_responsive_default_controls', TRUE),
      'autoplay' => variable_get('mediaelement_video_responsive_default_autoplay', FALSE),
      'start_frame' => variable_get('mediaelement_video_responsive_default_start_frame', FALSE),
      'no_video' => variable_get('mediaelement_video_responsive_default_no_video', FALSE),
      'poster_picture_group' => variable_get('mediaelement_video_responsive_poster_picture_group'),
      'width' => variable_get('mediaelement_video_responsive_default_width', '100%'),
      'height' => variable_get('mediaelement_video_responsive_default_height', '100%'),
      'download_link' => variable_get('mediaelement_responsive_video_default_download_link', FALSE),
      'download_text' => variable_get('mediaelement_responsive_video_default_download_text', t('Download')),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cr_video_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $picture_group_options = array();
  $picture_mappings = picture_mapping_load_all();
  if ($picture_mappings && !empty($picture_mappings)) {
    foreach ($picture_mappings as $machine_name => $picture_mapping) {
      $breakpoint_group = breakpoints_breakpoint_group_load($picture_mapping->breakpoint_group);
      if ($breakpoint_group) {
        $picture_group_options[$machine_name] = $breakpoint_group->name;
      }
    }
  }

  $element['poster_picture_group'] = array(
    '#title' => t('Poster Picture Group'),
    '#description' => t('The picture group name used for the poster attribute'),
    '#type' => 'select',
    '#default_value' => $settings['picture_group'],
    '#required' => TRUE,
    '#options' => $picture_group_options,
  );

  $element['controls'] = array(
    '#title' => t('Controls'),
    '#type' => 'checkbox',
    '#default_value' => $settings['controls'],
  );

   $element['autoplay'] = array(
    '#title' => t('Autoplay'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autoplay'],
  );

   $element['start_frame'] = array(
    '#title' => t('Dont Show Start frame'),
    '#type' => 'checkbox',
    '#default_value' => $settings['start_frame'],
  );

  $element['no_video'] = array(
    '#title' => t('Dont Show Video'),
    '#type' => 'checkbox',
    '#default_value' => $settings['no_video'],
  );

  /* Width in percentages causes issues on touch devices
    $element['width'] = array(
      '#title' => t('Width (Specify using px or 100%)'),
      '#type' => 'textfield',
      '#default_value' => $settings['width'],
    );

    $element['height'] = array(
      '#title' => t('Height (Specify using px or 100%)'),
      '#type' => 'textfield',
      '#default_value' => $settings['height'],
    );
  */

  $element['download_link'] = array(
    '#title' => t('Download Link'),
    '#type' => 'checkbox',
    '#default_value' => $settings['download_link'],
  );

  $element['download_text'] = array(
    '#title' => t('Download Link Text'),
    '#type' => 'textfield',
    '#default_value' => $settings['download_text'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 * Copied from mediaelement.module and modfied
 */
function cr_video_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // A unique caller per page for the JS specific settings to use. This may be
  // different for ever page view and should not be used for styling.
  static $id = 0;
  $element = array();
  $path = drupal_get_path('module', 'cr_video');
  foreach ($items as $delta => $item) {
    // Support the link field type which stores it's data in 'url'.
    $src = ($field['type'] == 'link_field') ? $item['url'] : $item['uri'];

    $settings = $display['settings'];
    $js_settings = array();
    $js_settings['opts'] = array();
    // This [pluginPath] has to passed as MediaElement doesnt know where to look if loaded dyanmically (ajax)
    $js_settings['pluginPath'] = '/' . libraries_get_path('mediaelement') . '/build/';
    $js_settings['controls'] = (bool)$settings['controls'];
    $js_settings['autoplay'] = (bool)$settings['autoplay'];
    $js_settings['opts']['iPhoneUseNativeControls'] = true;
    $js_settings['features'] = array('googleanalytics','playpause','progress','current','duration','tracks','volume','fullscreen');

    $class = 'mediaelement-formatter-identifier-' . time() . '-' . $id++;
    $element[$delta] = array(
      '#attributes' => array(
        'src' => file_create_url($src),
        'class' => $class,
      ),
      '#settings' => $settings,
      '#attached' => array(
        'library' => array(
          array('cr_video', 'posterfill'),
          array('mediaelement', 'mediaelement')
        ),
        'js' => array(
          $path . '/js/cr_video.js' => array(),
          0 => array('type' => 'setting', 'data' => array('cr_video_mediaelement' => array('.' . $class => $js_settings))),
        ),
        'css' => array(
          $path . '/css/cr_video.css',
        )
      ),
    );
    if ($settings['controls']) {
      $element[$delta]['#attributes']['controls'] = 'controls';
    }
    if ($settings['autoplay']) {
      $element[$delta]['#attributes']['autoplay'] = 'autoplay';
    }

    $element[$delta]['#theme'] = 'mediaelement_video';
    $element[$delta]['#attributes']['preload'] = 'none';
  }
  // pass library settings now that we have altered cbox behavior
  $cr_video_path = drupal_get_path('module','cr_video');
  $mediaelement_path = libraries_get_path('mediaelement');
  
  $css_paths = array(
    $mediaelement_path . '/build/mediaelementplayer.min.css' => 1,
    $cr_video_path . '/css/cr_video.css' => 1,
  );

  $js_paths = array(
    $mediaelement_path . '/build/mediaelement-and-player.min.js' => 1,
    $cr_video_path . '/js/cr_video.js' => 1,
  );
  
  drupal_add_js(array(
    'cr_video_mediaelement_paths' => array(
        'css' => $css_paths,
        'js' => $js_paths,
      )),
    'setting');
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cr_video_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  return t('Picture Group: @group', array('@group' => $settings['poster_picture_group']));
}


/**
 * Implementation of hook_views_pre_render() {
 */
function cr_video_views_pre_render(&$view) {

  if(module_exists("node_embed")) {
    if ($view->name == 'cr_ckeditor_node_embed' && $view->current_display == 'page_1') {

      node_embed_suppress_admin_menu();

    } // if
  }

} // node_embed_views_pre_render

/**
 * Implementation of hook_node_presave() {
 */

function cr_video_node_presave($node){

  if($node->type == "video"){

  $url = $node->field_video_url[$node->language][0]['url'];

  // Check to see if this is a YouTube video
  if(_is_youtube($url)){
    // Get YouTube id
    $id = _youtube_video_id($url);
    $thumb_url = 'http://img.youtube.com/vi/'.$id.'/0.jpg';
  }

  // Get HTTP response
  if(isset($id) && !empty($id)){

    $response = drupal_http_request($thumb_url);
    // If no response error then fetch image and save to file system
    if (!isset($response->error)) {

      $local_path = 'public://';
      file_prepare_directory($local_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
      $file = system_retrieve_file($thumb_url, $local_path . $id . '.jpg', TRUE, FILE_EXISTS_REPLACE);
      //Assign Fiel object to image field if user doesnt upload image
      if($file){
        if(count($node->field_poster_file[$node->language]) == 0){
          $file->display = 1;
          $file->description = "";

          $node->field_poster_file[LANGUAGE_NONE][0] = (array) $file;
          $link = l($url,$url);
          drupal_set_message(t("No start frame implemented, added YouTube poster in place for video !link", array('!link'=>$link)));
        }
      }else{
        watchdog(
          "cr_video",
          "Could not save video image from YouTube even though image @thumb_url exists",
          array('@thumb_url'=>$thumb_url)
        );
      }

    }else{
      watchdog(
        "cr_video",
         "Could not save video image from YouTube. Response error: @response_code ",
         array('@response_code'=>$response->error)
      );
    }
  }

  }
}

/**
 * Check if URL is youtube
 */
function _is_youtube($url){
  return (strpos($url, 'youtu') !== FALSE);
}

/**
 * Check if URL is vimeo
 */
function _is_vimeo($url){
  return (preg_match('/vimeo\.com/i', $url));
}

/**
 * Get YouTube url
 */
function _youtube_video_id($url)
{
  if(_is_youtube($url))
  {
    $pattern = '/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/';
    preg_match($pattern, $url, $matches);
    if (count($matches) && strlen($matches[7]) == 11)
    {
      return $matches[7];
    }
  }

  return '';
}

/**
 * Get Vimeo url
 */
function _vimeo_video_id($url)
{
  if(_is_vimeo($url))
  {
    $pattern = '/\/\/(www\.)?vimeo.com\/(\d+)($|\/)/';
    preg_match($pattern, $url, $matches);
    if (count($matches))
    {
      return $matches[2];
    }
  }

  return '';
}

/**
 * Implementation of hook_ajax_render_alter()
 * This is because we're using HTTP GET for colorbox node, and we have to manually
 * supply JS settings for each request only because colorbox node (rightfully) useses Drupals
 * ajax framework, which is (wrongfully) hardcoded to use HTTP $_POST.
 */
function cr_video_ajax_render_alter(&$commands){
  foreach($commands as $key => $command){
    if($command['command'] == "insert" && $command['selector'] == "#cboxLoadedContent"){
      $scripts = drupal_add_js();
      if (!empty($scripts['settings'])) {
        $settings = $scripts['settings'];
        $commands[0] = ajax_command_settings(call_user_func_array('array_merge_recursive', $settings['data']), TRUE);
        asort($commands);
      }

      if(isset($commands[0]['settings']['cr_video_mediaelement'])){
        $items = array();
        
        $cr_video_path = drupal_get_path('module','cr_video');
        $mediaelement_path = libraries_get_path('mediaelement');

        $paths['css'] = array(
          $mediaelement_path . '/build/mediaelementplayer.min.css',
          $cr_video_path . '/css/cr_video.css',
        );

        $paths['js'] = array(
          $mediaelement_path . '/build/mediaelement-and-player.min.js',
          $cr_video_path . '/js/cr_video.js',
        );
        // Make sure we dont load the same CSS/JS files over and over
        if(!isset($_GET['ajax_page_state'])){
          $items['js'] = drupal_add_js();
          $items['css'] = drupal_add_css();

          $js_scripts = array();

          foreach($paths['js'] as $js_path){
            if($items['js'][$js_path]){
              $js_scripts[] = $items['js'][$js_path];
            }
          }

          foreach($paths['css'] as $css_path){
            if($items['css'][$css_path]){
              $css_scripts[] = $items['css'][$css_path];
            }
          }

          $styles = drupal_get_css($css_scripts,TRUE);
          $scripts_header = drupal_get_js('header',$js_scripts,TRUE);
          
          if (!empty($scripts_header)) {
            $new_command[] = ajax_command_prepend('head', $scripts_header);
            $new_command[] = ajax_command_prepend('head', $styles);
            array_splice($commands, 1, 0 , $new_command);
          } 
        }

      }

    }
  }

}

/**
 * Implementation of hook_menu_alter()
 */
function cr_video_menu_alter(&$items){
  /**
   * We override colorbox node output callback in contrib module colorbox_node,
   * because we have changed it behavior to use HTTP GET. First colorbox_node_output was duplicated then
   * header was added.
   */
  $items['colorbox/%colorbox_node_url']['page callback'] = "cr_video_colorbox_node_output";
}

/*
 * Displays a node view without the page template.
 * Takes the path as our argument and from that we
 * will determine the internal path and node id.
 */
function cr_video_colorbox_node_output($path) {

  // Manually adding this here to respond to HTTP get requests
  drupal_add_http_header('Cache-Control', 'public, max-age=' . variable_get('cache_lifetime', 300));

  // @TODO, we should be able to use this for users too,
  // Lets beef this up and make it more intelligent around
  // the system path.
  if(!isset($_GET['destination'])) $_GET['destination'] = $path;

  // Lets include our context execution.
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('condition', 'colorbox_node')) {
      $plugin->execute('view');
    }
  }

  // Fetch our callback based on our path.
  $page_callback_result = menu_execute_active_handler($path, FALSE);

  // Allow other modules to alter the colorbox content.
  drupal_alter('colorbox_node_page_callback_result', $page_callback_result);

  // If the callback is an integer, we have an error, lets
  // render that out as a command.
  if (is_int($page_callback_result)) {
    $commands = ajax_prepare_response($page_callback_result);
  }
  else {
    $commands = array();
    // Is we have an array, lets assume we need to render it out.
    if (is_array($page_callback_result)) {
      // @TODO: Update this to reflect the correct method once this
      // issue is resolved: http://drupal.org/node/1154382
      if (isset($page_callback_result['nodes'])) {
        foreach ($page_callback_result['nodes'] as $nid => $tmpNode) {
          if (isset($tmpNode['#view_mode'])) {
            $node_view = $tmpNode['#node'];
            $node_view_array = node_view($node_view, 'colorbox');
            if (module_exists('comment')) {
              $node_view_array['comments'] = comment_node_page_additions($node_view);
            }
            $rendered_node = drupal_render($node_view_array);
            $page_callback_result['nodes'][$nid] = array('#markup' => $rendered_node);
          }
        }
      }
      $html = drupal_render($page_callback_result);
      $commands[] = ajax_command_html('#cboxLoadedContent', $html);
    }
    else {
      $commands[] = ajax_command_html('#cboxLoadedContent', $page_callback_result);
    }
  }
  // Render our commands out to the browser.
  return array('#type' => 'ajax', '#commands' => $commands);
}
