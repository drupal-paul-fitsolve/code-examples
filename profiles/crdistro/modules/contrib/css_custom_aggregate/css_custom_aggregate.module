<?php

/**
 * Implements hook_element_info_alter().
 *
 * Override the default css aggregate to fix the css aggregation if one of the
 * groups contains more than 4095 selectors.
 */
function css_custom_aggregate_element_info_alter(&$type) {
  $type['styles']['#group_callback'] = 'css_custom_aggregate_group_css';
}

/**
 * Splits the css groups into multiple groups if the group contains more than
 * 4095 selectors.
 *
 * @param $css
 *   An array of CSS items, as returned by drupal_add_css(), but after
 *   alteration performed by drupal_get_css().
 *
 * @return
 *   An array of CSS groups. Each group contains the same keys (e.g., 'media',
 *   'data', etc.) as a CSS item from the $css parameter, with the value of
 *   each key applying to the group as a whole. Each group also contains an
 *   'items' key, which is the subset of items from $css that are in the group.
 *
 * @see drupal_group_css()
 * @see css_custom_aggregate_element_info_alter()
 */
function css_custom_aggregate_group_css($css) {
  $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $css_groups = drupal_group_css($css);
  $final_css_groups = array();
  foreach ($css_groups as $index => $group) {
    $_group = $group;
    // If a file group can be aggregated into a single file analyze the group
    // and check if we need to split it.
    if ($_group['type'] == 'file' && $_group['preprocess'] && $preprocess_css) {
      $final_css_groups = array_merge($final_css_groups, css_custom_aggregate_analyze_group($_group));
    }
    else {
      $final_css_groups[] = $_group;
    }
  }

  return $final_css_groups;
}

function css_custom_aggregate_analyze_group($group) {
  $total_selectors_number = 0;
  $groups_items = array();
  $group_index = 0;

  foreach ($group['items'] as $stylesheet) {
    // Only 'file' stylesheets can be aggregated.
    if ($stylesheet['type'] == 'file') {
      $contents = drupal_load_stylesheet($stylesheet['data'], TRUE);

      $selectors_number = preg_match_all('/\{.+?\}|,/s',$contents,$matched);

      if ($total_selectors_number + $selectors_number > 4094) {
        $group_index++;
        $total_selectors_number = $selectors_number;
      }
      else {
        $total_selectors_number += $selectors_number;
      }

      $groups_items[$group_index][] = $stylesheet;
    }
  }

  $groups = array();
  if ($group_index) {
    foreach ($groups_items as $index => $items) {
      $group['group'] += $index;
      unset($group['items']);
      $group['items'] = $items;
      foreach ($group['items'] as &$item) {
        $item['group'] = $group['group'];
      }
      $groups[] = $group;
    }
  }
  else {
    $groups = array($group);
  }

  return $groups;
}