<?php
/**
 * @file
 * Code for the rnd15 Site Theme feature.
 */

include_once 'rnd15_site_theme.features.inc';

/**
 * Implements hook_js_alter().
 */
function rnd15_site_theme_js_alter(&$javascript) {

  $themePath = drupal_get_path('theme', 'rnd15');

  $newJs = array(
    // We need to run match media first thing to polyfill the match media
    // We also want to override it with
    drupal_get_path('module', 'picture') . '/picturefill/matchmedia.js' => array(
      'weight' => -110,
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
      'scope' => 'header',
      'data' => $themePath . '/js/overrides/rnd15.matchmedia.js',
    ),
    // We need picture fill only to run on images that are visible.
    // Override Picture Fill JS with our own rnd15 theme-specific Picture Fill JS.
    drupal_get_path('module', 'picture') . '/picturefill/picturefill.js' => array(
      'weight' => -100,
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
      'scope' => 'header',
      'data' => $themePath . '/js/overrides/rnd15.picturefill.min.js',
    ),
    libraries_get_path('flexslider') . '/jquery.flexslider-min.js' => array(
      'weight' => -90,
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
      'scope' => 'header',
      'data' => $themePath . '/js/overrides/rnd15.flexslider.min.js',
    ),
  );
  
  /**
   * Make sure that picture JS runs in the header!
   */
  if(!empty($javascript['sites/all/modules/contrib/picture/picture.js']['scope'])) {
    $javascript['sites/all/modules/contrib/picture/picture.js']['scope'] = 'header';
  }

  // Run helper function override the above js
  _rnd15_replace_file($javascript, $newJs);
}

/**
 * Implements hook_preprocess_TEMPLATE().
 */
function rnd15_site_theme_preprocess_html(&$variables) {
  // Add TypeKit OpenSans font kit - kitId: 'xip7ept'
  _rnd15_add_typekit('xip7ept', 3000);
}

/**
 * Helper function to replace an existing js with a new path
 */
function _rnd15_replace_file(&$files, $newFile) {
  foreach ($newFile as $oldpath => $newPath) {
    if (isset($files[$oldpath])) {
      if (is_array($newPath) && $newParam = $newPath) {
        // It's an assosiative array with additional parameters we want to override
        $files[$newParam['data']] = array_merge($files[$oldpath], $newParam);
      } else {
        // It's just a passed in URL
        $files[$newPath] = $files[$oldpath];
        $files[$newPath]['data'] = $newPath;
      }
      unset($files[$oldpath]);
    }
  }
}

/**
 * Typekit helper function
 * Adds a async way of loading typekit to the header
 * Swaps out to a Googel Closure compiled version
 * This is beneficial as it prevents blocking the page rendering until the TypeKit script has loaded:
 * More info: http://blog.typekit.com/2011/05/25/loading-typekit-fonts-asynchronously/
 */
function _rnd15_add_typekit($typekit_id, $script_timeout) {
$typekit_js_source = <<<EOD
(function() {
  var config = {
    kitId: '$typekit_id',
    scriptTimeout: $script_timeout
  };
  var h = document.getElementsByTagName('html')[0];
  h.className += ' wf-loading';
  var t = setTimeout(function() {
    h.className = h.className.replace(/(\s|^)wf-loading(\s|$)/g, ' ');
    h.className += ' wf-inactive';
  }, config.scriptTimeout);
  var d = false;
  var tk = document.createElement('script');
  tk.src = '//use.typekit.net/' + config.kitId + '.js';
  tk.type = 'text/javascript';
  tk.async = 'true';
  tk.onload = tk.onreadystatechange = function() {
    var rs = this.readyState;
    if (d || rs && rs != 'complete' && rs != 'loaded') return;
    d = true;
    clearTimeout(t);
    try { Typekit.load(config); } catch (e) {}
  };
  var s = document.getElementsByTagName('script')[0];
  s.parentNode.insertBefore(tk, s);
})();
EOD;
$typekit_js_minified = <<<EOD
(function(){var c={kitId:"$typekit_id",scriptTimeout:$script_timeout},a=document.getElementsByTagName("html")[0];a.className+=" wf-loading";var f=setTimeout(function(){a.className=a.className.replace(/(\s|^)wf-loading(\s|$)/g," ");a.className+=" wf-inactive"},c.scriptTimeout),d=!1,b=document.createElement("script");b.src="//use.typekit.net/"+c.kitId+".js";b.type="text/javascript";b.async="true";b.onload=b.onreadystatechange=function(){var a=this.readyState;if(!(d||a&&"complete"!=a&&"loaded"!=a)){d=!0;clearTimeout(f);
try{Typekit.load(c)}catch(b){}}};var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(b,e)})();
EOD;
  
  // Set to JS source by default
  $typekit_js = $typekit_js_source;

  // Change to minifed based on environments
  $live_environments = array('cam-production', 'production', 'staging', 'cam-staging');
  if(!empty($env) && in_array($env, $live_environments)) {
    $typekit_js = $typekit_js_minified;
  }
  // Add TypeKit
  drupal_add_js($typekit_js, array('type' => 'inline', 'scope' => 'header', 'weight' => JS_LIBRARY));
}