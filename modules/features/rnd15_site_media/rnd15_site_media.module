<?php
/**
 * @file
 * Code for the rnd15 Site Media feature.
 */

include_once 'rnd15_site_media.features.inc';

// Video image save directory
define("VIDEO_START_FRAME_DIR", 'public://field/images/video/');

/**
 * Implements hook_field_formatter_info().
 */
function rnd15_site_media_field_formatter_info() {
  $formatters = array();

  $formatters['rnd15_site_media_video'] = array(
    'label' => t('RND Video'),
    'field types' => array('file', 'link_field'),
    'settings' => array(
      'controls' => variable_get('rnd15_site_media_video_default_controls', TRUE),
      'download_link' => variable_get('rnd15_site_media_video_default_download_link', FALSE),
      'download_text' => variable_get('rnd15_site_media_video_default_download_text', t('Download')),
    ),
  );

  $formatters['rnd15_site_media_audio'] = array(
    'label' => t('RND Audio'),
    'field types' => array('file', 'link_field'),
    'settings' => array(
      'controls' => variable_get('rnd15_site_media_audio_default_controls', TRUE),
      'download_link' => variable_get('rnd15_site_media_audio_default_download_link', FALSE),
      'download_text' => variable_get('rnd15_site_media_audio_default_download_text', t('Download')),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function rnd15_site_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // A unique caller per page for the JS specific settings to use. This may be
  // different for ever page view and should not be used for styling.
  static $id = 0;
  $element = array();
  $path = drupal_get_path('module', 'rnd15_site_media');
  foreach ($items as $delta => $item) {
    // Support the link field type which stores it's data in 'url'.
    $src = ($field['type'] == 'link_field') ? $item['url'] : $item['uri'];

    $settings = $display['settings'];
    $js_settings = array();
    $js_settings['opts'] = array();
    $js_settings['controls'] = (bool)$settings['controls'];

    $class = 'mediaelement-formatter-identifier-' . time() . '-' . $id++;
    $element[$delta] = array(
      '#attributes' => array(
        'class' => $class,
      ),
      '#src' => file_create_url($src),
      '#settings' => $settings,
    );
    if ($settings['controls']) {
      $element[$delta]['#attributes']['controls'] = 'controls';
    }

    if ($display['type'] == 'rnd15_site_media_video') {
      $element[$delta]['#theme'] = 'rnd15_site_media_video';
    }
    elseif ($display['type'] == 'rnd15_site_media_audio') {
      $element[$delta]['#theme'] = 'rnd15_site_media_audio';
    }
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function rnd15_site_media_theme() {
  return array(
    'rnd15_site_media_video' => array(
      'variables' => array('attributes' => array(), 'src' => '', 'settings' => array()),
    ),
    'rnd15_site_media_audio' => array(
      'variables' => array('attributes' => array(), 'settings' => array()),
    ),
  );
}

function theme_rnd15_site_media_video($variables) {
  $output = '<div class="media-player media-player--video">';
  $output .= '<video ' . drupal_attributes($variables['attributes']) . ' width="100%" height="100%" style="width:100%;height:100%;">';
  $output .= '<source type="video/youtube" src="' . $variables['src'] . '"/>';
  $output .= '</video>';

  if ($variables['settings']['download_link']) {
    $output .= '<div class="mediaelement-download-link"><a href="' . $variables['src'] . '">' . filter_xss_admin($variables['settings']['download_text']) . '</a></div>';
  }
  $output .= '</div>';
  return $output;
}

function theme_rnd15_site_media_audio($variables) {
  $variables['attributes']['src'] = $variables['src'];
  $output = '<div class="media-player media-player--audio">';
  $output .= '<audio ' . drupal_attributes($variables['attributes']) . ' ></audio>';
  if ($variables['settings']['download_link']) {
    $output .= '<div class="mediaelement-download-link"><a href="' . $variables['src'] . '">' . filter_xss_admin($variables['settings']['download_text']) . '</a></div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function rnd15_site_media_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $element['controls'] = array(
    '#title' => t('Controls'),
    '#type' => 'checkbox',
    '#default_value' => $settings['controls'],
  );

  $element['download_link'] = array(
    '#title' => t('Download Link'),
    '#type' => 'checkbox',
    '#default_value' => $settings['download_link'],
  );

  $element['download_text'] = array(
    '#title' => t('Download Link Text'),
    '#type' => 'textfield',
    '#default_value' => $settings['download_text'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function rnd15_site_media_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $setting_args = array(
    '@controls'=> $settings['controls'] ? 'Yes' : 'No',
    '@download_link'=> $settings['download_link'] ? 'Yes' : 'No'
  );

  return t('Controls: @controls<br> Download Link: @download_link', $setting_args);
}

/**
 * Implements hook_field_attach_presave($entity_type, $entity)
 * Before saving the video start frame
 * check if empty, if so, see if we can grab one 
 * based on the video provider e.g. youtube
 */
function rnd15_site_media_node_presave($node) {
  if($node->type == 'video') {

    $video_items = field_get_items('node', $node, 'field_site_video_url');
    $video_startframe_items = field_get_items('node', $node, 'field_site_image');
    if(count($video_items) > 0 && count($video_startframe_items) === 0) {
      $url = $video_items[0]['url'];
      if(strpos($url, 'youtu') >= 0) {
        $image_obj = _get_startframe_youtube($url);
        if($image_obj) {
          $node->field_site_image[$node->language][] = $image_obj;
        }
      }
    }
  }
}

/**
 * Helper function get start frame from youtube
 */
function _get_startframe_youtube($video_url) {
  // Get the youtube video id
  $pos = (strpos($video_url,'?')+3);
  $video_id = substr($video_url, $pos);
  $filename = $video_id.'.jpg';

  // Create the url to the youtube image
  $youtube_img_low = "http://img.youtube.com/vi/{$video_id}/0.jpg";
  $youtube_img_high = "http://img.youtube.com/vi/{$video_id}/maxresdefault.jpg";

  // Create reference to directory from constant
  $video_dir = VIDEO_START_FRAME_DIR;

  // Prepare directory
  if(!file_prepare_directory($video_dir, FILE_CREATE_DIRECTORY)) {
    watchdog('rnd15_site_media', 'Could not create directory to save image from YouTube: %dir', array('%dir'=>$video_dir), WATCHDOG_ERROR);
    return;
  }

  // Try getting high rest, if not, get the low res default
  $response = drupal_http_request($youtube_img_high, array('timeout' => 10));

  if($response->code == '404') {
    $response = drupal_http_request($youtube_img_low);
  }

  $response_image = $response->data;

  $file_ob = file_save_data($response_image, $video_dir . $filename, FILE_EXISTS_RENAME);
  
  // Create the image field array to be returned
  $image_field_array = array(
    'fid' => $file_ob->fid,
    'filename' => $file_ob->filename,
    'filemime' => $file_ob->filemime,
    'uid' => 1,
    'uri' => $file_ob->uri,
    'status' => 1,
    'display' => 1,
  );

  return $image_field_array;
}