<?php
/**
 * @file
 * Code to implement the button field formatter.
 */

/**
 * Implements hook_theme().
 */
function buttonfield_theme() {
  return array(
    'link_formatter_link_button' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function buttonfield_field_formatter_info() {
  $formatters = array();

  $formatters['link_button'] = array(
    'label' => t('Button'),
    'field types' => array('link_field'),
    'settings' => array(
      'large' => variable_get('link_button_default_large', FALSE),
      'event' => variable_get('link_button_default_event', 'none'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function buttonfield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if ($display['type'] == 'link_button') {
    $element['large'] = array(
      '#title' => t('Large'),
      '#type' => 'checkbox',
      '#default_value' => $settings['large'],
    );
    $element['event'] = array(
      '#title' => t('Event'),
      '#type' => 'select',
      '#default_value' => $settings['event'],
      '#options' => array(
        'none' => 'None',
        'run' => 'Run',
        'swim' => 'Swim',
        'cycle' => 'Cycle'),
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function buttonfield_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $ouput = '';
  if($settings['large']) {
    $output .= 'Large ';
  }
  if($settings['event'] != 'none') {
    $output .= $settings['event'];
  }
  return $output;
}

/**
 * Implements hook_field_formatter_view().
 */
function buttonfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];
  foreach ($items as $delta => $item) {
    $item['attributes']['class'] = array('button');
    if($settings['large']) {
      $item['attributes']['class'][] = 'button--large';
    }
    if($settings['event'] != 'none') {
      $item['attributes']['class'][] = 'button--' . $settings['event'];
    }
    $elements[$delta] = array(
      '#theme' => 'link_formatter_link_button',
      '#element' => $item,
      '#field' => $instance,
      '#display' => $display,
    );
  }
  return $elements;
}

/**
 * Formats a  button link.
 */
function theme_link_formatter_link_button($vars) {
  $link_options = $vars['element'];
  unset($link_options['title']);
  unset($link_options['url']);
  $classes = array('button');
  // Display a normal link if both title and URL are available.
  if (!empty($vars['element']['title']) && !empty($vars['element']['url'])) {
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
  // If only a title, display the title.
  elseif (!empty($vars['element']['title'])) {
    return check_plain($vars['element']['title']);
  }
  elseif (!empty($vars['element']['url'])) {
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
}
